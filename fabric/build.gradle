plugins {
	// id 'fabric-loom' version '1.1-SNAPSHOT'
	// id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

// sourceCompatibility = JavaVersion.VERSION_17
// targetCompatibility = JavaVersion.VERSION_17

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    // mixin.defaultRefmapName = "hexcasting.mixins.refmap.json"
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    // To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"


	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// for CC: R
	modImplementation "com.github.cc-tweaked:cc-restitched:${project.cc_version}"
	// modAPI "com.github.cc-tweaked:cc-restitched:v1.18.2-1.100.8-ccr"

	// for REI, making sure it doesn't pop up with the keyboard
	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	// modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"

	// for HexCasting
	modImplementation "at.petra-k.hexcasting:hexcasting-fabric-${project.minecraft_version}:${project.hexcastingVersion}"

    modRuntimeOnly "maven.modrinth:hexal:${hexalVersion}"

	// Hex Casting Dependencies
	modImplementation "at.petra-k.paucal:paucal-fabric-${minecraft_version}:${paucalVersion}"
	modImplementation "vazkii.patchouli:Patchouli:${minecraft_version}-${patchouliVersion}-FABRIC"

    modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-api:${cardinalComponentsVersion}"

    modImplementation "com.jamieswhiteshirt:reach-entity-attributes:${entityReachVersion}"
    include "com.jamieswhiteshirt:reach-entity-attributes:${entityReachVersion}"

    modImplementation "io.github.tropheusj:serialization-hooks:${serializationHooksVersion}"
    include "io.github.tropheusj:serialization-hooks:${serializationHooksVersion}"

	modImplementation "maven.modrinth:lithium:${lithiumVersion}"
    modImplementation "maven.modrinth:phosphor:${phosphorVersion}"
	modImplementation "maven.modrinth:sodium:${sodiumVersion}"

     // for sodium matrices?
	implementation group: "org.joml", name: "joml", version: "1.10.5"
	include group: "org.joml", name: "joml", version: "1.10.5"

	
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    // injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
